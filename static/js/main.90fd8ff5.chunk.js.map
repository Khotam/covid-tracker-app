{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/CardComponent.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","image/covid.png"],"names":["module","exports","CardComponent","data","Grid","item","component","Card","xs","md","className","cx","styles","card","title","toLowerCase","CardContent","Typography","color","gutterBottom","variant","start","end","type","value","duration","separator","Date","lastUpdate","toDateString","Cards","confirmed","recovered","deaths","cardsArray","text","container","spacing","justify","map","idx","key","animatedLoader","url","fetchData","a","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","fetchSingleCountry","country","countryData","Chart","useState","setDailyData","useEffect","getDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","CountryPicker","handleCountryChange","setCountries","getCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","name","App","state","setState","fetchedData","this","onClick","image","src","covid","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90fd8ff5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Hz4V\",\"card\":\"Cards_card__184Ek\",\"infected\":\"Cards_infected__2SdiO\",\"recovered\":\"Cards_recovered__2xGg4\",\"deaths\":\"Cards_deaths__2tpAs\",\"animatedLoader\":\"Cards_animatedLoader__12Uvr\",\"animatedLoader1\":\"Cards_animatedLoader1__jN3Ux\",\"animatedLoader2\":\"Cards_animatedLoader2__U7tQ0\",\"animatedLoader3\":\"Cards_animatedLoader3__3K1uY\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst CardComponent = ({ data }) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Card}\r\n      xs={12}\r\n      md={3}\r\n      className={cx(styles.card, styles[data.title.toLowerCase()])}>\r\n      <CardContent>\r\n        <Typography color='textSecondary' gutterBottom>\r\n          {data.title}\r\n        </Typography>\r\n        <Typography variant='h5'>\r\n          <CountUp start={0} end={data[data.type].value} duration={2.5} separator=',' />\r\n        </Typography>\r\n        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n        <Typography variant='body2'>Number of infected people from COVID-19</Typography>\r\n      </CardContent>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CardComponent from './CardComponent';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  const cardsArray = [\r\n    {\r\n      confirmed,\r\n      text: 'Number of infected people from COVID-19',\r\n      type: 'confirmed',\r\n      title: 'Infected',\r\n      lastUpdate,\r\n    },\r\n    {\r\n      recovered,\r\n      text: 'Number of recoveries from COVID-19',\r\n      type: 'recovered',\r\n      title: 'Recovered',\r\n      lastUpdate,\r\n    },\r\n    { deaths, text: 'Number of deaths from COVID-19', type: 'deaths', title: 'Deaths', lastUpdate },\r\n  ];\r\n\r\n  if (!confirmed) {\r\n    return (\r\n      <div className={styles.animatedLoader}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify='center'>\r\n        {cardsArray.map((card, idx) => {\r\n          return <CardComponent data={card} key={idx} />;\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(url);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchSingleCountry = async (country) => {\r\n  const countryData = await axios.get(`${url}/countries/${country}`);\r\n  return countryData.data;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getDailyData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    getDailyData();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333cc',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255,0,0,0.5)',\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [\r\n          {\r\n            label: 'People',\r\n            backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current condition in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className={styles.container}>{country ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchCountries } from '../../api';\r\nimport { FormControl, NativeSelect } from '@material-ui/core';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n    getCountries();\r\n  }, []);\r\n\r\n  // console.log(countries);\r\n\r\n  if (!countries) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <FormControl>\r\n        <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n          <option value='global'>Global</option>\r\n          {countries &&\r\n            countries.map(({ name }) => {\r\n              return (\r\n                <option key={name} value={name}>\r\n                  {name}\r\n                </option>\r\n              );\r\n            })}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from 'react';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport styles from './App.module.css';\nimport { fetchData, fetchSingleCountry } from './api';\nimport covid from './image/covid.png';\n\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n      country: '',\n    });\n  }\n\n  handleCountryChange = async (country) => {\n    if (country === 'global') {\n      const data = await fetchData();\n      this.setState({\n        ...this.state,\n        data: data,\n        country: '',\n      });\n    } else {\n      const countryData = await fetchSingleCountry(country);\n      this.setState({ ...this.state, data: countryData, country });\n\n      console.log(countryData);\n    }\n  };\n\n  render() {\n    const { data, country } = this.state;\n    if (!data) {\n      return (\n        <div className={styles.animatedLoader}>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.container}>\n          <img\n            onClick={() => this.handleCountryChange('global')}\n            className={styles.image}\n            src={covid}\n            alt='coronavirus 2019'\n          />\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          <Cards data={data} country={country} />\n          <Chart data={data} country={country} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1_HQl\",\"image\":\"App_image__1Ec0_\",\"contaner\":\"App_contaner__1_3Ig\",\"animatedLoader\":\"App_animatedLoader__3rXhb\",\"animatedLoader1\":\"App_animatedLoader1__JPQue\",\"animatedLoader2\":\"App_animatedLoader2__fWDit\",\"animatedLoader3\":\"App_animatedLoader3__WqspF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3o0Hc\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}